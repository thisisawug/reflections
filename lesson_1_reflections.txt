How did viewing a diff between two versions of a file help you see the bug that
was introduced?

  - It saves much time to find typo and unexpected changes.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

	- It improves the bug-fix skill by forming the habit of comparing
    buggy programs with stable version.
	- A programmer can easily replace code to older and stable version
	  if the latest file includes a critical bug.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

  pros:
	- Users of Git can decide how many changes a single commit includes.

	cons:
	- Users might forget to commit.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

  - Git was firstly made for version control in software engineering, that holds
    many files. Programs consists of many files, and a programmer changes some
    files when the one add new feature. Then it's more useful to allow saving
    multiple files in one commit.

How can you use the commands git log and git diff to view the history of files?

  - git log  : to see commits of a file with commit IDs and comments
  - git diff x y : to compare difference between commit x and y

How might using version control make you more confident to make changes that
could break something?

  - By making it possible to easily go back to stable version, version control
    gives the users confident to make changes.

Now that you have your workspace set up, what do you want to try using Git for?

  I want to try using Git for ..
	 1) starting my weekend project.
	 2) collaborating with others to translate 'HP and the Methods of Rationality'
	    by sharing the repository on Github.
